{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects-JS\\\\drawing-board\\\\drawing-board\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport Canvas from './components/Canvas';\nimport ToolBar from './components/ToolBar';\nimport BoardList from './components/BoardList';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nimport LandingPage from './components/LandingPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = 'http://localhost:3001';\nconst App = () => {\n  _s();\n  const [brushColor, setBrushColor] = useState('#000000');\n  const [brushSize, setBrushSize] = useState(5);\n  const [boards, setBoards] = useState([{\n    id: '1',\n    name: 'Default Board'\n  }, {\n    id: '2',\n    name: 'Board 2'\n  }\n  // Add more pre-defined boards or fetch from a server\n  ]);\n  const [currentBoardId, setCurrentBoardId] = useState('1');\n  const [socket, setSocket] = useState(null);\n\n  // Establish a connection to the socket server\n  useEffect(() => {\n    const newSocket = io(SOCKET_SERVER_URL);\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, []);\n\n  // Function to handle board selection\n  const onJoinBoard = boardId => {\n    if (socket) {\n      socket.emit('joinBoard', {\n        boardId\n      });\n      setCurrentBoardId(boardId);\n      // Optionally, reset or fetch the drawing data for the newly selected board\n    }\n  };\n\n  // Listen for real-time drawing updates\n  useEffect(() => {\n    if (socket && currentBoardId) {\n      socket.on('drawing', drawingData => {\n        // Handle incoming drawing data\n        // You may need to adjust your Canvas component to accept drawing data\n      });\n      socket.emit('joinBoard', {\n        boardId: currentBoardId\n      }); // Join the default or selected board\n    }\n    return () => {\n      if (socket) {\n        socket.off('drawing');\n      }\n    };\n  }, [socket, currentBoardId]);\n\n  // Ref for the Canvas component is already correctly set up in your initial code\n  const canvasRef = useRef(null);\n  const handleClearCanvas = () => {\n    if (canvasRef.current) {\n      canvasRef.current.clearCanvas();\n      // Emit an event to clear the canvas on all clients\n      if (socket) {\n        socket.emit('clearCanvas', {\n          boardId: currentBoardId\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ToolBar, {\n      setBrushColor: setBrushColor,\n      setBrushSize: setBrushSize,\n      onClearCanvas: handleClearCanvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), currentBoardId && /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef,\n      brushColor: brushColor,\n      brushSize: brushSize,\n      roomId: currentBoardId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(BoardList, {\n      boards: boards,\n      onJoinBoard: onJoinBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fOa2F05oDrTYh+Z6GoJYUR7N5O8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","Canvas","ToolBar","BoardList","Login","SignUp","LandingPage","jsxDEV","_jsxDEV","SOCKET_SERVER_URL","App","_s","brushColor","setBrushColor","brushSize","setBrushSize","boards","setBoards","id","name","currentBoardId","setCurrentBoardId","socket","setSocket","newSocket","close","onJoinBoard","boardId","emit","on","drawingData","off","canvasRef","handleClearCanvas","current","clearCanvas","children","onClearCanvas","fileName","_jsxFileName","lineNumber","columnNumber","ref","roomId","_c","$RefreshReg$"],"sources":["C:/projects-JS/drawing-board/drawing-board/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Canvas from './components/Canvas';\r\nimport ToolBar from './components/ToolBar';\r\nimport BoardList from './components/BoardList';\r\nimport Login from './components/Login';\r\nimport SignUp from './components/SignUp';\r\nimport LandingPage from './components/LandingPage';\r\n\r\n\r\nconst SOCKET_SERVER_URL = 'http://localhost:3001'; \r\n\r\nconst App = () => {\r\n  const [brushColor, setBrushColor] = useState('#000000');\r\n  const [brushSize, setBrushSize] = useState(5);\r\n  const [boards, setBoards] = useState([\r\n    { id: '1', name: 'Default Board' },\r\n    { id: '2', name: 'Board 2' },\r\n    // Add more pre-defined boards or fetch from a server\r\n  ]);\r\n  const [currentBoardId, setCurrentBoardId] = useState('1');\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  // Establish a connection to the socket server\r\n  useEffect(() => {\r\n    const newSocket = io(SOCKET_SERVER_URL);\r\n    setSocket(newSocket);\r\n    return () => newSocket.close();\r\n  }, []);\r\n\r\n  // Function to handle board selection\r\n  const onJoinBoard = (boardId) => {\r\n    if (socket) {\r\n      socket.emit('joinBoard', { boardId });\r\n      setCurrentBoardId(boardId);\r\n      // Optionally, reset or fetch the drawing data for the newly selected board\r\n    }\r\n  };\r\n\r\n  // Listen for real-time drawing updates\r\n  useEffect(() => {\r\n    if (socket && currentBoardId) {\r\n      socket.on('drawing', (drawingData) => {\r\n        // Handle incoming drawing data\r\n        // You may need to adjust your Canvas component to accept drawing data\r\n      });\r\n\r\n      socket.emit('joinBoard', { boardId: currentBoardId }); // Join the default or selected board\r\n    }\r\n\r\n    return () => {\r\n      if (socket) {\r\n        socket.off('drawing');\r\n      }\r\n    };\r\n  }, [socket, currentBoardId]);\r\n\r\n  // Ref for the Canvas component is already correctly set up in your initial code\r\n  const canvasRef = useRef(null); \r\n\r\n  const handleClearCanvas = () => {\r\n    if (canvasRef.current) {\r\n      canvasRef.current.clearCanvas();\r\n      // Emit an event to clear the canvas on all clients\r\n      if (socket) {\r\n        socket.emit('clearCanvas', { boardId: currentBoardId });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToolBar setBrushColor={setBrushColor} setBrushSize={setBrushSize} onClearCanvas={handleClearCanvas} />\r\n      {currentBoardId && <Canvas ref={canvasRef} brushColor={brushColor} brushSize={brushSize} roomId={currentBoardId} />}\r\n      <BoardList boards={boards} onJoinBoard={onJoinBoard} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnD,MAAMC,iBAAiB,GAAG,uBAAuB;AAEjD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,SAAS,CAAC;EACvD,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,CACnC;IAAEqB,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAgB,CAAC,EAClC;IAAED,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAU;EAC3B;EAAA,CACD,CAAC;EACF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,GAAG,CAAC;EACzD,MAAM,CAACyB,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;;EAE1C;EACAE,SAAS,CAAC,MAAM;IACd,MAAMyB,SAAS,GAAGxB,EAAE,CAACS,iBAAiB,CAAC;IACvCc,SAAS,CAACC,SAAS,CAAC;IACpB,OAAO,MAAMA,SAAS,CAACC,KAAK,CAAC,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,WAAW,GAAIC,OAAO,IAAK;IAC/B,IAAIL,MAAM,EAAE;MACVA,MAAM,CAACM,IAAI,CAAC,WAAW,EAAE;QAAED;MAAQ,CAAC,CAAC;MACrCN,iBAAiB,CAACM,OAAO,CAAC;MAC1B;IACF;EACF,CAAC;;EAED;EACA5B,SAAS,CAAC,MAAM;IACd,IAAIuB,MAAM,IAAIF,cAAc,EAAE;MAC5BE,MAAM,CAACO,EAAE,CAAC,SAAS,EAAGC,WAAW,IAAK;QACpC;QACA;MAAA,CACD,CAAC;MAEFR,MAAM,CAACM,IAAI,CAAC,WAAW,EAAE;QAAED,OAAO,EAAEP;MAAe,CAAC,CAAC,CAAC,CAAC;IACzD;IAEA,OAAO,MAAM;MACX,IAAIE,MAAM,EAAE;QACVA,MAAM,CAACS,GAAG,CAAC,SAAS,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,CAACT,MAAM,EAAEF,cAAc,CAAC,CAAC;;EAE5B;EACA,MAAMY,SAAS,GAAGlC,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAMmC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAID,SAAS,CAACE,OAAO,EAAE;MACrBF,SAAS,CAACE,OAAO,CAACC,WAAW,CAAC,CAAC;MAC/B;MACA,IAAIb,MAAM,EAAE;QACVA,MAAM,CAACM,IAAI,CAAC,aAAa,EAAE;UAAED,OAAO,EAAEP;QAAe,CAAC,CAAC;MACzD;IACF;EACF,CAAC;EAED,oBACEZ,OAAA;IAAA4B,QAAA,gBACE5B,OAAA,CAACN,OAAO;MAACW,aAAa,EAAEA,aAAc;MAACE,YAAY,EAAEA,YAAa;MAACsB,aAAa,EAAEJ;IAAkB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACtGrB,cAAc,iBAAIZ,OAAA,CAACP,MAAM;MAACyC,GAAG,EAAEV,SAAU;MAACpB,UAAU,EAAEA,UAAW;MAACE,SAAS,EAAEA,SAAU;MAAC6B,MAAM,EAAEvB;IAAe;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnHjC,OAAA,CAACL,SAAS;MAACa,MAAM,EAAEA,MAAO;MAACU,WAAW,EAAEA;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAjEID,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAmET,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}